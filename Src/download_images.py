import asyncio
import os

import asyncpg
import httpx
from PIL import Image
from config import DB_CONFIG, IMAGES_DIR, CONCURRENCY_LIMIT




class ImageDownloader:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å—Å—ã–ª–∫–∞–º –∏–∑ –ë–î, –æ—á–∏—â–∞–µ—Ç –∏—Ö
    –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—É—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    def __init__(self, session: httpx.AsyncClient, db_pool: asyncpg.Pool):
        self.session = session
        self.db_pool = db_pool

    async def find_images_to_download(self) -> list[asyncpg.Record]:
        """–ù–∞—Ö–æ–¥–∏—Ç –≤ –ë–î –∑–∞–ø–∏—Å–∏, –≥–¥–µ image_url —è–≤–ª—è–µ—Ç—Å—è –≤–µ–±-—Å—Å—ã–ª–∫–æ–π."""
        async with self.db_pool.acquire() as connection:
            # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–≤–∞—Ä—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö URL –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http
            # –∏ —Ç–∞–∫–∂–µ –∏—Ö ID, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, –∫–∞–∫—É—é –∑–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª—è—Ç—å.
            records = await connection.fetch(
                "SELECT id, image_url FROM medicines WHERE image_url LIKE 'http%'"
            )
            return records

    async def process_image(self, medicine_id: int, image_url: str):
        """
        –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: —Å–∫–∞—á–∞—Ç—å, –æ—á–∏—Å—Ç–∏—Ç—å, –æ–±–Ω–æ–≤–∏—Ç—å –ë–î.
        """
        print(f"‚è≥ –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å: {image_url}")
        try:
            image_name = os.path.basename(image_url.split('?')[0])
            local_path = os.path.join(IMAGES_DIR, image_name)
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            os.makedirs(IMAGES_DIR, exist_ok=True)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º
            response = await self.session.get(image_url, timeout=30)
            response.raise_for_status()

            # –û—á–∏—â–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Pillow
            with Image.open(response.iter_bytes()) as img:
                img.save(local_path, format=img.format or 'JPEG', quality=85)
            
            # –°–∞–º—ã–π –≤–∞–∂–Ω—ã–π —à–∞–≥: –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
            await self.update_db_path(medicine_id, local_path)
            
            print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ID {medicine_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {local_path}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {image_url}: {e}")

    async def update_db_path(self, medicine_id: int, local_path: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ image_url –≤ –ë–î, –∑–∞–º–µ–Ω—è—è –≤–µ–±-—Å—Å—ã–ª–∫—É –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å."""
        async with self.db_pool.acquire() as connection:
            await connection.execute(
                "UPDATE medicines SET image_url = $1 WHERE id = $2",
                local_path, medicine_id
            )

async def main():
    db_pool = await asyncpg.create_pool(**DB_CONFIG)
    downloader = None # –û–±—ä—è–≤–ª—è–µ–º –∑–¥–µ—Å—å –¥–ª—è finally

    try:
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)'}
        async with httpx.AsyncClient(headers=headers, follow_redirects=True) as session:
            downloader = ImageDownloader(session, db_pool)
            
            images_to_process = await downloader.find_images_to_download()
            if not images_to_process:
                print("ü§∑ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
                return

            print(f"üñºÔ∏è  –ù–∞–π–¥–µ–Ω–æ {len(images_to_process)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
            
            semaphore = asyncio.Semaphore(CONCURRENCY_LIMIT)
            
            async def worker(record):
                async with semaphore:
                    await downloader.process_image(record['id'], record['image_url'])

            tasks = [asyncio.create_task(worker(record)) for record in images_to_process]
            await asyncio.gather(*tasks)

    finally:
        if db_pool:
            await db_pool.close()
        print("\nüéâ –†–∞–±–æ—Ç–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

if __name__ == "__main__":
    asyncio.run(main())
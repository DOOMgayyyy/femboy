# 1_parse_categories.py
import requests
import json
from bs4 import BeautifulSoup
import time

class GosAptekaParser:
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è —Å–∞–π—Ç–∞ gosapteka18.ru.
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏.
    """
    def __init__(self):
        self.base_url = 'https://gosapteka18.ru'
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8'
        }
        self.session = requests.Session()
        self.session.headers.update(self.headers)

    def fetch_html(self, url):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
        try:
            response = self.session.get(url, timeout=20)
            response.raise_for_status()
            return response.text
        except requests.exceptions.RequestException as e:
            print(f"üö´ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {url}: {str(e)}")
            return None

class CategoryParser(GosAptekaParser):
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Å–∞–π—Ç–∞."""
    def parse_catalog(self):
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∫–∞—Ç–∞–ª–æ–≥–∞.
        """
        print("‚ñ∂Ô∏è –®–∞–≥ 1: –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
        main_page_url = self.base_url + '/'
        html = self.fetch_html(main_page_url)
        if not html:
            return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É'}

        try:
            soup = BeautifulSoup(html, 'html.parser')
            catalog_container = soup.find('div', class_='menu-catalog')
            if not catalog_container:
                return {'error': "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ 'menu-catalog' –Ω–µ –Ω–∞–π–¥–µ–Ω"}

            structured_categories = {}
            columns = catalog_container.find_all('div', class_='menu-catalog__list')
            if not columns:
                return {'error': "–ö–æ–ª–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π 'menu-catalog__list' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}

            for col in columns:
                items = col.find_all('div', class_='menu-catalog__item', recursive=False)
                for item in items:
                    parent_link = item.find('a', class_='menu-catalog__link')
                    if not parent_link or not parent_link.text.strip():
                        continue

                    parent_name = parent_link.text.strip()
                    parent_url = self.base_url + parent_link.get('href', '')
                    subcategories_l1 = []
                    submenu_l1 = item.find('div', class_='menu-catalog__sub-menu')
                    
                    if submenu_l1:
                        subitems_l1 = submenu_l1.find_all('div', class_='menu-catalog__sub-item')
                        for subitem in subitems_l1:
                            sub_link = subitem.find('a', class_='menu-catalog__sub-link')
                            if not sub_link: continue
                            
                            sub_name = sub_link.text.strip()
                            sub_url = self.base_url + sub_link.get('href', '')
                            subcategories_l2 = []
                            submenu_l2 = subitem.find('div', class_='menu-catalog__sub2-menu')
                            
                            if submenu_l2:
                                for sub2_link in submenu_l2.find_all('a', class_='menu-catalog__sub2-link'):
                                    subcategories_l2.append({
                                        'name': sub2_link.text.strip(),
                                        'url': self.base_url + sub2_link.get('href', '')
                                    })
                            
                            subcategories_l1.append({
                                'name': sub_name, 'url': sub_url, 'subcategories': subcategories_l2
                            })
                    
                    structured_categories[parent_name] = {'url': parent_url, 'subcategories': subcategories_l1}
            
            print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–∞.")
            return structured_categories
        except Exception as e:
            print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            return {"error": str(e)}

def main():
    parser = CategoryParser()
    catalog_data = parser.parse_catalog()

    if 'error' in catalog_data or not catalog_data:
        print(f"üö´ –û—à–∏–±–∫–∞: {catalog_data.get('error', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.')}")
        return

    with open('categories.json', 'w', encoding='utf-8') as f:
        json.dump(catalog_data, f, ensure_ascii=False, indent=4)
    
    print("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ 'categories.json'")

if __name__ == "__main__":
    main()